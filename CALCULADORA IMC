<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de IMC e Pressão Arterial</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        /* Estilos anteriores */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: none;
        }
        .dark-mode {
            background-color: #121212;
            color: #ffffff;
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Código anterior -->
    </div>

    <script>
        // Funções anteriores

        // 1. Autenticação de usuário
        function registerUser() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            localStorage.setItem('user', JSON.stringify({ email, password }));
            alert('Usuário registrado com sucesso!');
        }

        function loginUser() {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const user = JSON.parse(localStorage.getItem('user'));
            if (user && user.email === email && user.password === password) {
                alert('Login bem-sucedido!');
            } else {
                alert('E-mail ou senha incorretos.');
            }
        }

        // 2. Perfil do usuário
        function updateProfile() {
            const name = document.getElementById('profileName').value;
            const age = document.getElementById('profileAge').value;
            localStorage.setItem('profile', JSON.stringify({ name, age }));
            alert('Perfil atualizado!');
        }

        // 3. Lembretes diários
        function showReminder() {
            const reminder = document.getElementById('reminder');
            reminder.textContent = 'Lembre-se de beber água!';
            reminder.style.display = 'block';
            setTimeout(() => {
                reminder.style.display = 'none';
            }, 5000);
        }

        // 4. Calculadora de hidratação
        function calculateWaterIntake() {
            const weight = parseFloat(document.getElementById('peso').value);
            const waterIntake = weight * 0.035; // 35 ml por kg de peso
            alert(`Você deve beber ${waterIntake.toFixed(2)} litros de água por dia.`);
        }

        // 5. Calculadora de gasto calórico por atividade
        function calculateCaloriesBurned() {
            const activity = document.getElementById('activity').value;
            const duration = parseFloat(document.getElementById('duration').value);
            const weight = parseFloat(document.getElementById('peso').value);
            let caloriesBurned;
            switch (activity) {
                case 'caminhada':
                    caloriesBurned = duration * weight * 0.035;
                    break;
                case 'corrida':
                    caloriesBurned = duration * weight * 0.065;
                    break;
                default:
                    caloriesBurned = 0;
            }
            alert(`Você queimou ${caloriesBurned.toFixed(2)} calorias.`);
        }

        // 6. Plano de exercícios personalizado
        function suggestExercises() {
            const imc = parseFloat(document.getElementById('imc').value);
            let exercises;
            if (imc < 18.5) {
                exercises = 'Exercícios de força e ganho de massa muscular.';
            } else if (imc >= 18.5 && imc < 24.9) {
                exercises = 'Exercícios cardiovasculares e de manutenção.';
            } else {
                exercises = 'Exercícios aeróbicos e de perda de peso.';
            }
            alert(`Sugestão de exercícios: ${exercises}`);
        }

        // 7. Integração com API de clima
        async function getWeather() {
            const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=São Paulo&appid=SUA_CHAVE_API');
            const data = await response.json();
            alert(`Clima atual: ${data.weather[0].description}`);
        }

        // 8. Gráfico de comparação de IMC
        function renderComparisonChart() {
            const comparisonCtx = document.getElementById('comparisonChart').getContext('2d');
            new Chart(comparisonCtx, {
                type: 'bar',
                data: {
                    labels: ['Seu IMC', 'Média'],
                    datasets: [{
                        label: 'IMC',
                        data: [25, 22], // Exemplo
                        backgroundColor: ['#007bff', '#28a745']
                    }]
                }
            });
        }

        // 9. Exportação de dados para CSV
        function exportToCSV() {
            const history = JSON.parse(localStorage.getItem('history')) || [];
            let csv = 'Data,Idade,Altura,Peso,IMC,Risco\n';
            history.forEach(entry => {
                csv += `${entry.date},${entry.idade},${entry.altura},${entry.peso},${entry.imc},${entry.risco}\n`;
            });
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'historico.csv';
            a.click();
        }

        // 10. Importação de dados
        function importData(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const data = e.target.result;
                localStorage.setItem('history', data);
                alert('Dados importados com sucesso!');
            };
            reader.readAsText(file);
        }

        // 11. Modo escuro/claro
        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
        }

        // 12. Idiomas suportados
        function changeLanguage(lang) {
            localStorage.setItem('language', lang);
            alert('Idioma alterado!');
        }

        // 13. Calculadora de macronutrientes
        function calculateMacronutrients() {
            const calories = parseFloat(document.getElementById('calories').value);
            const carbs = (calories * 0.5) / 4; // 50% de carboidratos
            const proteins = (calories * 0.3) / 4; // 30% de proteínas
            const fats = (calories * 0.2) / 9; // 20% de gorduras
            alert(`Macronutrientes: ${carbs.toFixed(2)}g carboidratos, ${proteins.toFixed(2)}g proteínas, ${fats.toFixed(2)}g gorduras.`);
        }

        // 14. Lista de alimentos saudáveis
        function suggestHealthyFoods() {
            const foods = ['Maçã', 'Banana', 'Frango', 'Salmão', 'Brócolis'];
            alert(`Alimentos saudáveis: ${foods.join(', ')}`);
        }

        // 15. Calculadora de sono ideal
        function calculateSleep() {
            const age = parseInt(document.getElementById('idade').value);
            let sleep;
            if (age < 18) {
                sleep = '8-10 horas';
            } else {
                sleep = '7-9 horas';
            }
            alert(`Sono ideal: ${sleep}`);
        }

        // 16. Gráfico de progresso
        function renderProgressChart() {
            const progressCtx = document.getElementById('progressChart').getContext('2d');
            new Chart(progressCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai'],
                    datasets: [{
                        label: 'Peso (kg)',
                        data: [70, 68, 67, 66, 65],
                        borderColor: '#007bff'
                    }]
                }
            });
        }

        // 17. Calculadora de índice de massa muscular
        function calculateMuscleMass() {
            const weight = parseFloat(document.getElementById('peso').value);
            const fatPercentage = parseFloat(document.getElementById('fatPercentage').value);
            const muscleMass = weight * (1 - fatPercentage / 100);
            alert(`Massa muscular: ${muscleMass.toFixed(2)} kg`);
        }

        // 18. Calculadora de taxa de gordura corporal
        function calculateBodyFat() {
            const waist = parseFloat(document.getElementById('waist').value);
            const neck = parseFloat(document.getElementById('neck').value);
            const height = parseFloat(document.getElementById('altura').value);
            const bodyFat = 495 / (1.0324 - 0.19077 * Math.log10(waist - neck) + 0.15456 * Math.log10(height)) - 450;
            alert(`Taxa de gordura corporal: ${bodyFat.toFixed(2)}%`);
        }

        // 19. Integração com API de receitas saudáveis
        async function getHealthyRecipes() {
            const response = await fetch('https://api.edamam.com/search?q=healthy&app_id=SUA_ID&app_key=SUA_CHAVE');
            const data = await response.json();
            alert(`Receita sugerida: ${data.hits[0].recipe.label}`);
        }

        // 20. Calculadora de gasto energético basal
        function calculateBMR() {
            const weight = parseFloat(document.getElementById('peso').value);
            const height = parseFloat(document.getElementById('altura').value);
            const age = parseInt(document.getElementById('idade').value);
            const sex = document.getElementById('sexo').value;
            let bmr;
            if (sex === 'masculino') {
                bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age);
            } else {
                bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age);
            }
            alert(`Gasto energético basal: ${bmr.toFixed(2)} calorias/dia`);
        }

        // 21. Calculadora de IMC infantil
        function calculateChildBMI() {
            const weight = parseFloat(document.getElementById('peso').value);
            const height = parseFloat(document.getElementById('altura').value);
            const bmi = weight / (height * height);
            alert(`IMC infantil: ${bmi.toFixed(2)}`);
        }

        // 22. Gráfico de calorias consumidas vs. gastas
        function renderCaloriesChart() {
            const caloriesCtx = document.getElementById('caloriesChart').getContext('2d');
            new Chart(caloriesCtx, {
                type: 'bar',
                data: {
                    labels: ['Consumidas', 'Gastas'],
                    datasets: [{
                        label: 'Calorias',
                        data: [2000, 1800],
                        backgroundColor: ['#007bff', '#28a745']
                    }]
                }
            });
        }

        // 23. Calculadora de tempo para atingir metas
        function calculateGoalTime() {
            const currentWeight = parseFloat(document.getElementById('peso').value);
            const goalWeight = parseFloat(document.getElementById('goalWeight').value);
            const weightLossPerWeek = parseFloat(document.getElementById('weightLossPerWeek').value);
            const weeks = (currentWeight - goalWeight) / weightLossPerWeek;
            alert(`Você atingirá sua meta em ${weeks.toFixed(2)} semanas.`);
        }

        // 24. Integração com wearables
        function syncWithWearable() {
            alert('Sincronizando com wearable...');
        }

        // 25. Calculadora de índice de massa óssea
        function calculateBoneMass() {
            const weight = parseFloat(document.getElementById('peso').value);
            const boneMass = weight * 0.15; // Exemplo fictício
            alert(`Massa óssea: ${boneMass.toFixed(2)} kg`);
        }

        // 26. Gráfico de distribuição de macronutrientes
        function renderMacronutrientsChart() {
            const macroCtx = document.getElementById('macronutrientsChart').getContext('2d');
            new Chart(macroCtx, {
                type: 'pie',
                data: {
                    labels: ['Carboidratos', 'Proteínas', 'Gorduras'],
                    datasets: [{
                        data: [50, 30, 20],
                        backgroundColor: ['#007bff', '#28a745', '#dc3545']
                    }]
                }
            });
        }

        // 27. Calculadora de risco cardiovascular
        function calculateCardiovascularRisk() {
            const age = parseInt(document.getElementById('idade').value);
            const weight = parseFloat(document.getElementById('peso').value);
            const risk = age * weight * 0.01; // Exemplo fictício
            alert(`Risco cardiovascular: ${risk.toFixed(2)}%`);
        }

        // 28. Calculadora de índice de massa visceral
        function calculateVisceralFat() {
            const waist = parseFloat(document.getElementById('waist').value);
            const visceralFat = waist * 0.8; // Exemplo fictício
            alert(`Gordura visceral: ${visceralFat.toFixed(2)}`);
        }

        // 29. Integração com API de nutrição
        async function getNutritionInfo() {
            const response = await fetch('https://api.nutritionix.com/v1_1/item?id=513fceb475b8dbbc21002dc9&appId=SUA_ID&appKey=SUA_CHAVE');
            const data = await response.json();
            alert(`Informação nutricional: ${data.item_name}`);
        }

        // 30. Calculadora de índice de massa magra
        function calculateLeanMass() {
            const weight = parseFloat(document.getElementById('peso').value);
            const fatPercentage = parseFloat(document.getElementById('fatPercentage').value);
            const leanMass = weight * (1 - fatPercentage / 100);
            alert(`Massa magra: ${leanMass.toFixed(2)} kg`);
        }

        // 31. Gráfico de histórico de peso
        function renderWeightHistoryChart() {
            const weightCtx = document.getElementById('weightHistoryChart').getContext('2d');
            new Chart(weightCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai'],
                    datasets: [{
                        label: 'Peso (kg)',
                        data: [70, 68, 67, 66, 65],
                        borderColor: '#007bff'
                    }]
                }
            });
        }

        // 32. Calculadora de índice de massa corporal ajustado
        function calculateAdjustedBMI() {
            const weight = parseFloat(document.getElementById('peso').value);
            const height = parseFloat(document.getElementById('altura').value);
            const muscleMass = parseFloat(document.getElementById('muscleMass').value);
            const adjustedBMI = (weight / (height * height)) * (1 + muscleMass * 0.1); // Exemplo fictício
            alert(`IMC ajustado: ${adjustedBMI.toFixed(2)}`);
        }

        // Inicialização
        updateEvolutionChart();
        updateHistoryTable();
        showNotification("Lembre-se de se exercitar hoje!");
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>